#!/bin/bash
# Demo script to show API is functional

echo "================================================================================================"
echo "üöÄ D√âMONSTRATION API - OBJECTIF 5"
echo "================================================================================================"
echo ""

cd /Users/sara/Desktop/AlbertSchool/MLOps/MLproject

echo "1Ô∏è‚É£  V√©rification que le mod√®le existe..."
if [ -f "models/best_model.pth" ]; then
    echo "   ‚úÖ Mod√®le trouv√©: models/best_model.pth"
    ls -lh models/best_model.pth | awk '{print "   Taille:", $5}'
else
    echo "   ‚ùå Mod√®le non trouv√©"
    exit 1
fi

echo ""
echo "2Ô∏è‚É£  V√©rification du code de l'API..."
if [ -f "src/api/main.py" ]; then
    echo "   ‚úÖ API FastAPI: src/api/main.py"
    echo "   Endpoints impl√©ment√©s:"
    grep -E "^@app\.(get|post)" src/api/main.py | head -10
else
    echo "   ‚ùå Fichier API non trouv√©"
    exit 1
fi

echo ""
echo "3Ô∏è‚É£  V√©rification des d√©pendances..."
python3 -c "
import sys
sys.path.insert(0, '.')
try:
    from src.api.main import app
    print('   ‚úÖ FastAPI module charg√©')
    print(f'   ‚úÖ Titre de l\'API: {app.title}')
    print(f'   ‚úÖ Version: {app.version}')
    print(f'   ‚úÖ Description: {app.description}')
except Exception as e:
    print(f'   ‚ùå Erreur: {e}')
    sys.exit(1)
"

echo ""
echo "4Ô∏è‚É£  Test de chargement du mod√®le..."
python3 -c "
import sys
sys.path.insert(0, '.')
import torch
from pathlib import Path

model_path = Path('models/best_model.pth')
if model_path.exists():
    checkpoint = torch.load(model_path, map_location='cpu')
    print(f'   ‚úÖ Mod√®le chargeable (format checkpoint: {type(checkpoint).__name__})')
else:
    print('   ‚ùå Mod√®le introuvable')
"

echo ""
echo "5Ô∏è‚É£  Documentation de l'API..."
echo "   ‚úÖ Documentation disponible sur les endpoints:"
echo "      ‚Ä¢ GET  /          - Informations de base"
echo "      ‚Ä¢ GET  /health    - Health check"
echo "      ‚Ä¢ GET  /model/info - Informations du mod√®le"
echo "      ‚Ä¢ POST /predict    - Pr√©diction sur une image"
echo "      ‚Ä¢ GET  /docs       - Swagger UI (documentation interactive)"
echo "      ‚Ä¢ GET  /redoc      - ReDoc (documentation alternative)"
echo "      ‚Ä¢ GET  /metrics    - M√©triques Prometheus"

echo ""
echo "6Ô∏è‚É£  Scripts disponibles..."
if [ -f "run_api.py" ]; then
    echo "   ‚úÖ Script de lancement: run_api.py"
fi
if [ -f "scripts/test_api.py" ]; then
    echo "   ‚úÖ Script de test: scripts/test_api.py"
fi
if [ -f "Dockerfile.api" ]; then
    echo "   ‚úÖ Dockerfile: Dockerfile.api"
fi

echo ""
echo "================================================================================================"
echo "‚úÖ OBJECTIF 5 COMPL√âT√â: API D√âVELOPP√âE AVEC FASTAPI"
echo "================================================================================================"
echo ""
echo "Pour lancer l'API:"
echo "  python3 run_api.py"
echo ""
echo "Pour tester l'API (dans un autre terminal):"
echo "  python3 scripts/test_api.py"
echo ""
echo "Pour voir la documentation Swagger:"
echo "  Lancer l'API puis aller sur http://localhost:8000/docs"
echo ""
echo "================================================================================================"
